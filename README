# -*- mode: org; org-html-head-include-default-style: nil; org-html-postamble: nil; -*-
#+OPTIONS: toc:nil
* nx-router
=nx-router= is a URL routing extension for [[https://nyxt.atlas.engineer/][Nyxt]]. It lets you define fine-grained routes so you can enhance the browsing experience without getting your attention sucked away. You can set up URL redirects, block lists, open resources with external applications, all in a cohesive configuration language.

** Installation
To install the extension, you need to download the source and place it in Nyxt's extensions path, given by the value of =nyxt-source-registry= (by default =~/.local/share/nyxt/extensions=).

#+begin_src sh
git clone https://git.sr.ht/~conses/nx-router ~/.local/share/nyxt/extensions/nx-router
#+end_src

The extension works with *Nyxt 3 onward*, so ensure to use it with the latest version of Nyxt master for the time being.

If you want to place the extension elsewhere in the system, such as for development purposes, you can configure so via the ASDF source registry mechanism. For this, you'll need to create a file in the source registry directory, =~/.config/common-lisp/source-registry.conf.d/=, and then put the following contents into it, replacing the path with the desired system path.

#+name: 10-personal-lisp.conf
#+begin_src lisp
(:tree "/path/to/user/location")
#+end_src

Then, make sure to refresh the ASDF cache via =asdf:clear-source-registry=. ASDF will now be able to find the extension on the custom path. For more information on this utility, please refer to the [[https://asdf.common-lisp.dev/asdf.html][ASDF manual]].

However, by default Nyxt won't read the custom source registry path we provided, so ensure to include a =reset-asdf-registries= invocation in the Nyxt's initialization file too.

In your Nyxt initialization file, place the following.

#+begin_src lisp
(load-after-system :nx-router (nyxt-config-file "/path/to/router.lisp"))

(define-configuration buffer
  ((default-modes `(router:router-mode ,@%slot-default%))))
#+end_src

Where =/path/to/router.lisp= is a custom file that should be created to provide the extension settings after the =nx-router= system has been successfully loaded. Inside this file, you should provide the extension options, explained in the following section.

** Configuration
To get familiar with the format of URL routes in =nx-router=, see the following sample configuration along with the description of what each slot does.

#+begin_src lisp
(import 'router:make-route)

(define-configuration router:router-mode
  ((router:enforce-p t)
   (router:media-enabled-p t)
   (router:banner-p t)
   (router:routes
    (list
     (make-route '((match-domain "instagram.com")
                   (match-regex "https://bibliogram.*"))
                 :redirect '("insta.trom.tf" (:path ("/u" (not "/" "/p/" "/tv"))))
                 :instances #'make-bibliogram-instances)
     (make-route (match-domain "tiktok.com")
                 :redirect '("proxitok.herokuapp.com"
                             (:path ("/@placeholder/video" (not "/")))))
     (make-route (match-domain "reddit.com")
                 :redirect "teddit.namazso.eu"
                 :blocklist '(:path (:contains (not "/comments"))))
     (make-route '((match-regex ".*/watch\\?v=.*")
                   (match-file-extension "mp3")
                   :redirect "youtube.com"
                   :external (lambda (data)
                               (eval-in-emacs
                                `(mpv-start
                                  ,(quri:render-uri (url data)))))))
     (make-route (match-domain "amazon.com")
                 :blocklist '(:host (:starts (not "smile"))))
     (make-route (match-domain "lemmy.ml")
                 :blocklist '(:path (:contains ("post") :starts ("/u"))))
     (make-route (match-domain "github.com")
                 :blocklist '(:path (or 1 (:contains (not "pulls" "search")))))
     (make-route (match-domain "timewastingsite1.com"
                               "timewastingsite2.com")
                 :blocklist t)))))
#+end_src

Where =router:router-mode= slots include:

- =enforce-p= :: if non-=nil=, this prevents you from disabling the mode.
- =media-enabled-p= :: specifies whether to show media in sites. This can be overridden on a per-=route= basis later in the configuration.
- =banner-p= :: if non-=nil=, displays a Nyxt internal page upon visiting blocked triggers.
- =routes= :: list of =route='s. See the below documentation on how to build a =route= object.

=route= slots include a mini-DSL that specifies what URL part to block, redirect or invoke externally via a comparison type. Personally, I believe this is a bit more straightforward than having to fiddle around with complex regular expressions and it allows you to define many site behaviors within a single point. The following is a detailed description of all the available slots:

- =redirect= :: can take a redirect URL simply as a string or as a cons of the form =(REDIRECT-URI RULE)=, where =RULE= is another pair, with the =car= being either =:path= or =:host=. In the case of =:path=, the =cdr= is a pair of the form =(REPLACEMENT-PATH ORIGINAL-PATHS)=, where =ORIGINAL-PATHS= is a list of paths of the original URL which will be redirected to =REPLACEMENT-PATH=. If you want to redirect all paths except =ORIGINAL-PATHS= to =REPLACEMENT-PATH=, prefix this list with =not=.
- =blocklist= :: a property list of blocking conditions in the form of =(TYPE VALUE)=, where =TYPE= can be one of =:path= or =:host=, and =VALUE= is either another property list of the form =(TYPE PATHNAMES)=, where =TYPE= is either =:starts=, =:ends=, or =:contains= to denote the URL comparison and =PATHNAMES= is a list of URL pathnames to draw the comparison against, or an integer to indicate the number of URL /sections/ (e.g. =https://example.com/section_1/section_2=) to block in case the blocking condition value is not known. If =PATHNAMES= is prefixed with =not=, all paths will be blocked except for the specified list. Also, a blocklist can be given the value =t= to block all the routes for the defined sources.
- =external= :: used to open resources externally. If it's a function, it takes a single parameter =REQUEST-DATA= and can invoke arbitrary Lisp forms within it. If provided as a string, it will run the specified command via =uiop:run-program= with the current URL as its argument in a =format=-like syntax.
- =media-p= :: whether to show media in the resource or not. This is useful if you want to block all media via the =router:media-enabled-p= slot, but only override it for certain resources.
- =instances= :: you can provide a custom function to compute a list of instances, which will be added to the route's triggers automatically. This is useful if a service provides an official endpoint where these are stored.

The following describes the above routes as per their order.

- Set up all Instagram requests to redirect to the host =insta.trom.tf= and additionally redirect all its paths which don't start with =/=, =/p/=, or =/tv= to =/u= paths, as this is what the [[https://bibliogram.art/][Bibliogram]] alternative Instagram front-end uses for its URL structure. Do note this route also takes an =instances= slot, which is a custom function like =make-bibliogram-instances= to be provided by the user that will compute a list of instances. This is useful if the service that is used as the =:redirect= slot offers a list of predefined instances, and these will also be added to the route's triggers on route instantiation. Indeed, triggers can also consist of lists of predicates for which to match URLs, which means on the =Instagram= route above, it will match either domains that contain =instagram.com= or URLs that contain the regexp starting with =https://bibliogram.*=.

- Redirect all TikTok requests except the index path to =/@placeholder/video= since this is what [[https://github.com/pablouser1/ProxiTok][ProxiTok]] uses for its video paths.

- Redirect all Reddit requests to the =teddit.namazso.eu= host and additionally block all of the paths belonging to this trigger except those that contain the =/comments= path. This would essentially limit the user to only being able to access Reddit publications instead of sections like its main feed.

- Matches on YouTube video URLs, videos hosted on its alternative front-ends such as [[https://invidious.io/][Invidious]],  as well as MP3 files, redirecting all of these requests to =youtube.com=, and dispatching a rule which invokes an external program with the current request data, in this case launching an [[https://mpv.io/][mpv]] player IPC client process through [[https://github.com/kljohann/mpv.el][mpv.el]] to control the player from Emacs. You could also pass a one-placeholder format string such as =mpv --video=no ~a= to the =:external= slot if you'd rather not use a Lisp form, where =~a= represents the current route URL.

- Showcases the use of a hostname blocklist, in this case preventing the user from accessing Amazon URLs unless they contain the =smile= hostname.

- Consists of a blocklist for certain paths of the =lemmy.ml= domain; namely, the blocked paths would be those that contain =post= on them or the ones that start with =/u=, which would block all publications and user profiles on the site.

- Provides a combined path rule for =github.com= requests. Combined rules (specified via =or=) in paths allow you to specify two or more predicates that you wish to draw the path comparison against. In this specific combination, the integer will first indicate that we want to block those paths that consist of a single sub-section (e.g. =https://github.com/profile_name=), /or/ block all paths except the ones which contain =pulls= or =search=. This essentially allows you to specify a more general block rule and bypass it for certain scenarios. In this case, it would block all single sub-section paths on =github.com= (such as profiles, the marketplace and so on) but at the same time allow you to use GitHub's search engine and see your listed pull requests.

- Serves as a general blocklist trigger. To block an entire URL predicate or list of predicates, you can simply pass =t= to the =blocklist= slot.

** Contributing
You can use the project's [[https://lists.sr.ht/~conses/nx-router][mailing list]] to send feedback, patches or open discussions. Bugs should be reported on the project's [[https://todo.sr.ht/~conses/nx-router][bug-tracker]].
